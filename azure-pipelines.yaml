# Useful references:
# 1) Predefined variables - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#pipeline-variables-devops-services
# 2) Tasks catalogue - https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops#utility
# 3) YAML schema - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#script

name: Udacity - $(Date:yyyyMMdd) # Udacity Quality Releases Pipeline

trigger:
- master

variables:
  VM_IMAGE: 'ubuntu-latest'
  PYTHON_VERSION: '3.7.6' # not sure if needed at all
  PROJECT_ROOT: $(System.DefaultWorkingDirectory)
  AZURE_SERVICE_CONNECTION: 'quality-releases-service-connection'
  BUILD_API: 'build_fakerestapi'
  BUILD_SELENIUM: 'build_selenium'
  ARTEFACT_SELENIUM: 'logs_selenium'
  ARTEFACT_JMETER: 'logs_jmeter'

pool: 
  vmImage: $(VM_IMAGE)
  
stages:
- stage: provision_infrastructure
  displayName: Provision
  jobs:
  - job: terraform
    displayName: Terraform provisioning
    steps:
    - task: DownloadSecureFile@1
      displayName: Download udacity.pub key file
      name: UDACITY_PUB_KEY
      inputs:
        secureFile: 'udacity.pub'
    - task: DownloadSecureFile@1
      displayName: Download terraform.tfvars file
      name: TFVARS
      inputs:
        secureFile: 'terraform.tfvars'
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
          terraformVersion: 1.0.11
    - script: |
        terraform --version
      displayName: Check terraform version
    - script: |
        cp $(TFVARS.secureFilePath) $(PROJECT_ROOT)/terraform
        ls terraform -la
      displayName: Add terraform.tfvars to WD
    - task: AzureCLI@2
      displayName: Terraform init
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd terraform
          ls -la
          terraform init -backend-config="terraform.tfvars"
    # NOTE: directory where the key is saved on the agent, must correspond
    # to the location defined locally in vm.tf, in object admin_ssh_key
    - script: |
        mkdir -p ~/.ssh/private
        cp $(UDACITY_PUB_KEY.secureFilePath) ~/.ssh/private/udacity.pub
        ls ~/.ssh/private -la
      displayName: Add udacity.pub to .ssh
    - script: |
        cd terraform
        terraform apply -auto-approve
      displayName: Terraform apply
    # - script: |
    #     cd terraform
    #     terraform destroy -auto-approve
    #   displayName: Terraform destroy

- stage: build_code
  displayName: Build
  jobs:
  - job: Build
    displayName: Build code
    steps:
    - task: ArchiveFiles@2
      displayName: Build FakeRestAPI
      inputs:
        rootFolderOrFile: $(PROJECT_ROOT)/fakerestapi
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: Upload FakeRestAPI archive
      artifact: $(BUILD_API)
    - task: ArchiveFiles@2
      displayName: Build Selenium
      inputs:
        rootFolderOrFile: $(PROJECT_ROOT)/automatedtesting/selenium
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
      displayName: Upload Selenium archive
      artifact: $(BUILD_SELENIUM)

- stage: deploy_code
  displayName: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestApi
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure Web App
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              appName: 'quality-release-app-app-service'
              appType: webApp
              package: $(Agent.BuildDirectory)/$(BUILD_API)/$(Build.BuildId)-fakerestapi.zip
  - deployment: deploy_vm
    displayName: Deploy VM
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |              
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get upgrade -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              
              curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
              python3 get-pip.py --force-reinstall
              
              python3 --version
              pip --version

              pip install selenium

              # Log Analytics installation (executed once on startup)
              # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
            env: 
              AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
            displayName: Deploy Azure VM

- stage: test
  displayName: Test
  jobs:
  - job: test_postman
    displayName: Run Postman tests
    steps:
    - script: |
        sudo npm install -g newman
        sudo npm install -g newman-reporter-junitfull
        mkdir -p log/tests/postman
      displayName: Install Postman cli
    - script: |
        newman run automatedtesting/postman/StarterApi_RegressionTests.postman_collection.json \
            -e automatedtesting/postman/Test.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export log/tests/postman/RegressionTests.xml \
            --suppress-exit-code
      continueOnError: true
      displayName: Run Postman regression tests
    - script: |
        newman run automatedtesting/postman/StarterApi_ValidationTests.postman_collection.json \
            -e automatedtesting/postman/Test.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export log/tests/postman/ValidationTests.xml \
            --suppress-exit-code
      continueOnError: true
      displayName: Run Postman validation tests
    - task: PublishTestResults@2
      displayName: Publish Postman test results
      inputs:
        testRunner: JUnit
        searchFolder: $(System.DefaultWorkingDirectory)/log/tests/postman
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: Postman test results
  - deployment: test_selenium
    displayName: Run Selenium tests
    environment: 
      name: Test
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              sudo apt-get install zip unzip
              cd $(Pipeline.Workspace)/$(BUILD_SELENIUM)
              ls -la
              unzip -o $(Build.BuildId)-selenium.zip
              ls -la
              pwd
              
              sudo mkdir -p /var/log/selenium
              sudo chmod 777 /var/log/selenium

              python3 -u selenium_tests.py > /var/log/selenium/selenium-tests.txt

              ls -la /var/log
              ls -la /var/log/selenium

              sudo cp /var/log/selenium/selenium-tests.txt /home/konradino/selenium-tests.txt
            displayName: Run Selenium tests
            
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium test logs
            inputs:
              targetPath: /home/konradino/selenium-tests.txt
              artifactName: $(ARTEFACT_SELENIUM)
  - job: test_jmeter
    displayName: Run JMeter tests
    steps:
    - script: |
        sudo add-apt-repository ppa:openjdk-r/ppa
        sudo apt-get update -y
        sudo apt-get install openjdk-11-jre-headless -y
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        mkdir -p logs/tests/jmeter
      displayName: Install JMeter
    - script: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx \
          -l logs/tests/jmeter/jmeter-endurance-test-results.csv \
          -e -f -o logs/tests/jmeter/endurance-test-html-report
        ls -la logs/tests/jmeter
        cat logs/tests/jmeter/jmeter-endurance-test-results.csv
      displayName: Run JMeter Endurance tests
    - script: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/StressTest.jmx \
          -l logs/tests/jmeter/jmeter-stress-test-results.csv \
          -e -f -o logs/tests/jmeter/stress-test-html-report
        ls -la logs/tests/jmeter
        cat logs/tests/jmeter/jmeter-stress-test-results.csv
      displayName: Run JMeter Stress tests
    - task: ArchiveFiles@2
      displayName: JMeter Endurance Report to Artifact
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/logs/tests/jmeter/endurance-test-html-report
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(System.DefaultWorkingDirectory)/logs/tests/jmeter/endurance-test-html-report-$(Build.BuildId).zip
        verbose: true
    - task: ArchiveFiles@2
      displayName: JMeter Stress Report to Artifact
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/logs/tests/jmeter/stress-test-html-report
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(System.DefaultWorkingDirectory)/logs/tests/jmeter/stress-test-html-report-$(Build.BuildId).zip
        verbose: true      
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter  test logs
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/logs/tests/jmeter
        artifactName: $(ARTEFACT_JMETER)