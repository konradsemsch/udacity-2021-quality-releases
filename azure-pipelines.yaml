

trigger:
- master

name: Azure Pipelines
variables:
  vmImageName: 'ubuntu-latest'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.7.6'
  
stages:
- stage: Provision
  jobs:
  - job: Provision
    displayName: Provision Infrastructure
    pool:
      vmImage: $(vmImageName)
    steps:
    # Get securely terraform.tfvars file from Azure
    - task: DownloadSecureFile@1
      name: tfvars
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    # Add terraform.tfvars to WD
    - bash: |
        cp $(tfvars.secureFilePath) $(projectRoot)/terraform
        ls -la
      displayName: Add terraform.tfvars to WD
    # Get securely the ssh key
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'udacity ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHF0OdPtZvHRG/Qmae6aXhHQDklRXl6kXzq/I9n44utA'
        sshKeySecureFile: 'udacity'
      
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: './automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: ''
              appName: ''
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


