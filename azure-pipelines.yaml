# Useful references:
# 1) Predefined variables - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#pipeline-variables-devops-services
# 2) Tasks catalogue - https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops#utility
# 3) YAML schema - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#script

name: Udacity Quality Releases Pipeline

trigger:
- master

variables:
  VM_IMAGE: 'ubuntu-latest'
  PYTHON_VERSION: '3.7.6' # not sure if needed at all
  PROJECT_ROOT: $(System.DefaultWorkingDirectory)
  AZURE_SERVICE_CONNECTION: 'quality-releases-service-connection'
  ARTEFACT_API: 'build_fakerestapi'
  ARTEFACT_SELENIUM: 'build_selenium'

pool: 
  vmImage: $(VM_IMAGE)
  
stages:
- stage: provision_infrastructure
  displayName: Provision
  jobs:
  - job: terraform
    displayName: Terraform provisioning
    steps:
    - task: DownloadSecureFile@1
      displayName: Download udacity.pub key file
      name: UDACITY_PUB_KEY
      inputs:
        secureFile: 'udacity.pub'
    - task: DownloadSecureFile@1
      displayName: Download terraform.tfvars file
      name: TFVARS
      inputs:
        secureFile: 'terraform.tfvars'
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
          terraformVersion: 1.0.11
    - script: |
        terraform --version
      displayName: Check terraform version
    - script: |
        cp $(TFVARS.secureFilePath) $(PROJECT_ROOT)/terraform
        ls terraform -la
      displayName: Add terraform.tfvars to WD
    - task: AzureCLI@2
      displayName: Terraform init
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd terraform
          ls -la
          terraform init -backend-config="terraform.tfvars"
    # NOTE: directory where the key is saved on the agent, must correspond
    # to the location defined locally in vm.tf, in object admin_ssh_key
    - script: |
        mkdir -p ~/.ssh/private
        cp $(UDACITY_PUB_KEY.secureFilePath) ~/.ssh/private/udacity.pub
        ls ~/.ssh/private -la
      displayName: Add udacity.pub to .ssh
    - script: |
        cd terraform
        terraform apply -auto-approve
      displayName: Terraform apply

- stage: build_code
  displayName: Build
  jobs:
  - job: Build
    displayName: Build code
    steps:
    - task: ArchiveFiles@2
      displayName: Build FakeRestAPI
      inputs:
        rootFolderOrFile: $(PROJECT_ROOT)/automatedtesting/jmeter/fakerestapi
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: Upload FakeRestAPI archive
      artifact: $(ARTEFACT_API)
    - task: ArchiveFiles@2
      displayName: Build Selenium
      inputs:
        rootFolderOrFile: $(PROJECT_ROOT)/automatedtesting/selenium
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
      displayName: Upload Selenium archive
      artifact: $(ARTEFACT_SELENIUM)

- stage: deploy_code
  displayName: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'quality-releases-service-connection'
              appName: 'quality-release-app-app-service'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    pool:
      vmImage: $(vmImageName)
    # displayName: NAME
    environment:
      name:  'TEST'
      resourceType: VirtualMachine
      # tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              #! /bin/bash
              
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get upgrade -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              
              curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
              python3 get-pip.py --force-reinstall
              
              python3 --version
              pip --version

              pip install selenium

              # Log Analytics installation (executed once on startup)
              wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
            env: 
              AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)

- stage: test
  displayName: Test
  jobs:
  - job: tests_postman
    displayName: Postman Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        sudo npm install -g newman
        sudo npm install -g newman-reporter-junitfull
      displayName: 'Install Postman Dependencies'
    # - script:
    #     newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/StarterAPIs.json" -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/StarterAPIs.json" -r cli,junitfull --reporter-junitfull-export StarterAPIs.xml
    #   displayName: 'Run Postman Data Validation Tests'
  - deployment: tests_selenium
    displayName: Selenium tests
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/drop-selenium
              unzip -o selenium-$(Build.BuildId).zip
              
              sudo mkdir -p /var/log/selenium
              sudo chmod 777 /var/log/selenium
              python3 -u selenium_tests.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              
              sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            displayName: Run Selenium tests
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'
  - deployment: tests_jmeter
    displayName: JMeter tests
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo add-apt-repository ppa:openjdk-r/ppa
              sudo apt-get update -y
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              mkdir -p log/jmeter
            displayName: Install Java
          # - task: JMeterInstaller@0
          #   displayName: 'Install JMeter 5.4.1'
          #   inputs:
          #     jmeterVersion: '5.4.1'
          # - task: Bash@3
          #   displayName: Run Jmeter tests
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       jmeter -n -t automatedtesting/jmeter/Starter.jmx -Jresdir= automatedtesting/jmeter/pages.csv.


# - stage: Destroy
#   jobs:
#   - job: Destroy
#     displayName: Destroy Infrastructure
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - script: |
#         cd terraform
#         terraform destroy -auto-approve
#       displayName: Terraform destroy