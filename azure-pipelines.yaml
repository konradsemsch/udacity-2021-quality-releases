

trigger:
- master

name: Azure Pipelines
variables:
  vmImageName: 'ubuntu-latest'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.7.6'
  
stages:

- stage: Provision
  jobs:
  - job: Provision
    displayName: Provision Infrastructure
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      name: udacity
      displayName: Download udacity public key
      inputs:
        secureFile: 'udacity.pub'
    # Install Terraform
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
          terraformVersion: 1.0.11
    # Check Terraform version
    - bash: |
        terraform --version
      displayName: Confirm Terraform version
    - task: DownloadSecureFile@1
      name: tfvars
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    # Get securely terraform.tfvars file from Azure
    - script: |
        cp $(tfvars.secureFilePath) $(projectRoot)/terraform
        ls terraform -la
      displayName: Add terraform.tfvars to WD
    - task: AzureCLI@2
      displayName: Azure CLI
      inputs:
        azureSubscription: 'quality-releases-service-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd terraform
          ls -la
          terraform init -backend-config="terraform.tfvars"
    - script: |
        mkdir -p ~/.ssh/private
        cp $(udacity.secureFilePath) ~/.ssh/private/udacity.pub
        ls ~/.ssh/private -la
      displayName: Add udacity.pub to .ssh
    - script: |
        cd terraform
        terraform apply -auto-approve
      displayName: Terraform apply
    # - script: |
    #     cd terraform
    #     terraform destroy -auto-approve
    #   displayName: Terraform destroy

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip
      displayName: 'Upload Package'
      artifact: drop-selenium

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'quality-releases-service-connection'
              appName: 'quality-release-app-app-service'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    pool:
      vmImage: $(vmImageName)
    # displayName: NAME
    environment:
      name:  'TEST'
      resourceType: VirtualMachine
      # tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              #! /bin/bash
              
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get upgrade -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              
              curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
              python3 get-pip.py --force-reinstall
              
              python3 --version
              pip --version

              pip install selenium

              # Log Analytics installation (executed once on startup)
              wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
            env: 
              AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)

- stage: Test
  jobs:
  - job: tests_postman
    displayName: Postman Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        sudo npm install -g newman
        sudo npm install -g newman-reporter-junitfull
      displayName: 'Install Postman Dependencies'
    # - script:
    #     newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/StarterAPIs.json" -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/StarterAPIs.json" -r cli,junitfull --reporter-junitfull-export StarterAPIs.xml
    #   displayName: 'Run Postman Data Validation Tests'
  - deployment: tests_selenium
    displayName: Selenium tests
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/drop-selenium
              unzip -o selenium-$(Build.BuildId).zip
              
              sudo mkdir -p /var/log/selenium
              sudo chmod 777 /var/log/selenium
              python3 -u selenium_tests.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              
              sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            displayName: Run Selenium tests
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'
  - deployment: tests_jmeter
    displayName: JMeter tests
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get upgrade -y
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              # wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
              # tar xzvf jmeter.tgz
              # mkdir -p log/jmeter
            displayName: Install Java
          - task: JMeterInstaller@0
            displayName: 'Install JMeter 5.2.1'
            inputs:
              jmeterVersion: '5.2.1'
          - task: Bash@3
            displayName: Run Jmeter tests
            inputs:
              targetType: 'inline'
              script: |
                jmeter -n -t automatedtesting/jmeter/Starter.jmx -Jresdir= automatedtesting/jmeter/pages.csv.


# - stage: Destroy
#   jobs:
#   - job: Destroy
#     displayName: Destroy Infrastructure
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - script: |
#         cd terraform
#         terraform destroy -auto-approve
#       displayName: Terraform destroy