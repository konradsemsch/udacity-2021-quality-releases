

trigger:
- master

name: Azure Pipelines
variables:
  vmImageName: 'ubuntu-latest'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.7.6'
  
stages:

- stage: Provision
  jobs:
  - job: Provision
    displayName: Provision Infrastructure
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      name: udacity
      displayName: Download udacity public key
      inputs:
        secureFile: 'udacity.pub'
    # Install Terraform
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
          terraformVersion: 1.0.11
    # Check Terraform version
    - bash: |
        terraform --version
      displayName: Confirm Terraform version
    - task: DownloadSecureFile@1
      name: tfvars
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    # Get securely terraform.tfvars file from Azure
    - script: |
        cp $(tfvars.secureFilePath) $(projectRoot)/terraform
        ls terraform -la
      displayName: Add terraform.tfvars to WD
    - task: AzureCLI@2
      displayName: Azure CLI
      inputs:
        azureSubscription: 'quality-releases-service-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd terraform
          ls -la
          terraform init -backend-config="terraform.tfvars"
    - script: |
        mkdir -p ~/.ssh/private
        cp $(udacity.secureFilePath) ~/.ssh/private/udacity.pub
        ls ~/.ssh/private -la
      displayName: Add udacity.pub to .ssh
    - script: |
        cd terraform
        terraform apply -auto-approve
      displayName: Terraform apply
    - script: |
        cd terraform
        terraform destroy -auto-approve
      displayName: Terraform destroy

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip
      displayName: 'Upload Package'
      artifact: drop-selenium

# - stage: Destroy
#   jobs:
#   - job: Destroy
#     displayName: Destroy Infrastructure
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - script: |
#         cd terraform
#         terraform destroy -auto-approve
#       displayName: Terraform destroy

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'quality-releases-service-connection'
              appName: 'quality-release-app'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    pool:
      vmImage: $(vmImageName)
    # displayName: NAME
    environment:
      name:  'Test'
      resourceType: VirtualMachine
      # tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                # export PATH=$PATH:some/path